import json
from datetime import datetime, timedelta

class Book:
    def __init__(self, title, author, isbn, quantity):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.quantity = quantity

    def display_info(self):
        print(f"Title: {self.title}\nAuthor: {self.author}\nISBN: {self.isbn}\nQuantity: {self.quantity}")

    def to_dict(self):
        return {
            "title": self.title,
            "author": self.author,
            "isbn": self.isbn,
            "quantity": self.quantity
        }


class Patron:
    def __init__(self, name, id_number, contact_info):
        self.name = name
        self.id_number = id_number
        self.contact_info = contact_info

    def display_info(self):
        print(f"Name: {self.name}\nID: {self.id_number}\nContact Info: {self.contact_info}")

    def to_dict(self):
        return {
            "name": self.name,
            "id": self.id_number,
            "contact_info": self.contact_info
        }


class Transaction:
    def __init__(self, book, patron):
        self.book = book
        self.patron = patron
        self.check_out_date = datetime.now()
        self.due_date = self.check_out_date + timedelta(days=14)  # Due date set to 14 days from checkout
        self.checked_out = False

    def check_out(self):
        if self.book.quantity > 0 and not self.checked_out:
            self.checked_out = True
            self.book.quantity -= 1
            print(f"Book '{self.book.title}' checked out to {self.patron.name}")
        else:
            print("Book not available for checkout or already checked out")

    def check_in(self):
        if self.checked_out:
            self.checked_out = False
            self.book.quantity += 1
            print(f"Book '{self.book.title}' checked in")
        else:
            print("Book is not checked out")

    def display_transaction_details(self):
        print(f"Book: {self.book.title}\nPatron: {self.patron.name}\nCheckout Date: {self.check_out_date.strftime('%Y-%m-%d')}\nDue Date: {self.due_date.strftime('%Y-%m-%d')}")


class Library:
    def __init__(self):
        self.books = []  # List to store books
        self.patrons = []  # List to store patrons
        self.transactions = []  # List to store transactions

    def add_book(self, book):
        self.books.append(book)

    def remove_book(self, book):
        self.books.remove(book)

    def add_patron(self, patron):
        self.patrons.append(patron)

    def remove_patron(self, patron):
        self.patrons.remove(patron)

    def search_books(self, query):
        return [book for book in self.books if query in [book.title, book.author, book.isbn]]

    def process_transaction(self, transaction):
        self.transactions.append(transaction)

    def generate_reports(self):
        total_books = len(self.books)
        total_patrons = len(self.patrons)
        total_transactions = len(self.transactions)

        print("Library Reports:")
        print(f"Total Books in Library: {total_books}")
        print(f"Total Patrons registered: {total_patrons}")
        print(f"Total Transactions conducted: {total_transactions}")


class LibraryCLI:
    def __init__(self, library):
        self.library = library

    def display_menu(self):
        print("Library Management System Menu:")
        print("1. Add a book")
        print("2. Remove a book")
        print("3. Check out a book")
        print("4. Check in a book")
        print("5. Generate Reports")
        print("6. Exit")

    def run(self):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")
            if choice == '1':
                self.add_book()
            elif choice == '2':
                self.remove_book()
            elif choice == '3':
                self.check_out_book()
            elif choice == '4':
                self.check_in_book()
            elif choice == '5':
                self.generate_reports()
            elif choice == '6':
                break
            else:
                print("Invalid choice, please try again.")

    def add_book(self):
        title = input("Enter the title of the book: ")
        author = input("Enter the author of the book: ")
        isbn = input("Enter the ISBN of the book: ")
        quantity = int(input("Enter the quantity of the book: "))

        new_book = Book(title, author, isbn, quantity)
        self.library.add_book(new_book)
        print("Book added successfully.")

    def remove_book(self):
        title = input("Enter the title of the book to remove: ")
        for book in self.library.books:
            if book.title == title:
                self.library.remove_book(book)
                print("Book removed successfully.")
                return
        print("Book not found.")

    def check_out_book(self):
        title = input("Enter the title of the book to check out: ")
        for book in self.library.books:
            if book.title == title:
                patron_name = input("Enter the name of the patron: ")
                for patron in self.library.patrons:
                    if patron.name == patron_name:
                        new_transaction = Transaction(book, patron)
                        new_transaction.check_out()
                        new_transaction.display_transaction_details()
                        self.library.process_transaction(new_transaction)
                        return
                print("Patron not found.")
                return
        print("Book not found.")

    def check_in_book(self):
        title = input("Enter the title of the book to check in: ")
        for transaction in self.library.transactions:
            if transaction.book.title == title and transaction.checked_out:
                transaction.check_in()
                return
        print("Book not found or not checked out.")

    def generate_reports(self):
        self.library.generate_reports()


def main():
    library = Library()
    library_cli = LibraryCLI(library)
    library_cli.run()


if __name__ == "__main__":
    main()

book1 = Book("How to Code", "Victor", "123456789", 5)
patron1 = Patron("Ken Arty", "P001", "Ken@example.com")
transaction1 = Transaction(book1, patron1, "2022-12-31")

library = Library()
library_cli = LibraryCLI(library)

# Add books
book1 = Book("How to code in Python", "Victor Deni", "9780743273565", 5)
book2 = Book("To Kill a Mockingbird", "Harper Lee", "9780061120084", 3)
library.add_book(book1)
library.add_book(book2)

# Add patrons (assuming Patron objects are added similarly)
patron1 = Patron("Ken", "123", "Ken@example.com")
patron2 = Patron("Bob", "456", "bob@example.com")
library.add_patron(patron1)
library.add_patron(patron2)

# Perform transactions (checking out a book)
transaction = Transaction(book1, patron1, "2024-03-10")
transaction.check_out()

# Remove a book
library_cli.remove_book()

# Generate reports
library.generate_reports()


Project Description:

This project represents a basic library management system implemented in Python. Here's a breakdown of its components:

Book Class: Represents a book with attributes such as title, author, ISBN, and quantity. It also has methods to display information about the book and convert its attributes to a dictionary.

Patron Class: Represents a library patron with attributes like name, ID number, and contact information. Similar to the Book class, it also has methods for displaying information and converting attributes to a dictionary.

Transaction Class: Represents a transaction involving the checkout and check-in of a book by a patron. It records the book, the patron, checkout date, due date, and whether it's checked out. 
It provides methods to perform checkout, check-in, and display transaction details.

Library Class: Manages the books, patrons, and transactions. It allows adding/removing books and patrons, searching for books, processing transactions, and generating reports on the library's status.

LibraryCLI Class: Implements a command-line interface (CLI) for interacting with the library system. It provides options to add/remove books, check out/check in books, generate reports, and exit the program.

Main Function: Initializes the library instance, creates a CLI instance with the library, and starts the CLI interface.

Overall, this code provides a basic framework for a library management system with features including adding, removing, and searching for books, handling transactions, and generating reports.

Structure of the Code:

Library Management System

Classes:
1. Book:
    - Attributes:
        - title
        - author
        - isbn
        - quantity
    - Methods:
        - display_info(): Display book information
        - to_dict(): Convert book attributes to dictionary

2. Patron:
    - Attributes:
        - name
        - id_number
        - contact_info
    - Methods:
        - display_info(): Display patron information
        - to_dict(): Convert patron attributes to dictionary

3. Transaction:
    - Attributes:
        - book: Book object
        - patron: Patron object
        - check_out_date: Date and time of checkout
        - due_date: Due date for return
        - checked_out: Boolean indicating if book is checked out
    - Methods:
        - check_out(): Check out the book
        - check_in(): Check in the book
        - display_transaction_details(): Display transaction details

4. Library:
    - Attributes:
        - books: List to store Book objects
        - patrons: List to store Patron objects
        - transactions: List to store Transaction objects
    - Methods:
        - add_book(book): Add a book to the library
        - remove_book(book): Remove a book from the library
        - add_patron(patron): Add a patron to the library
        - remove_patron(patron): Remove a patron from the library
        - search_books(query): Search for books by title, author, or ISBN
        - process_transaction(transaction): Process a transaction
        - generate_reports(): Generate reports on library status

5. LibraryCLI:
    - Attributes:
        - library: Library object
    - Methods:
        - display_menu(): Display the menu options
        - run(): Run the CLI interface
        - add_book(): Add a book through CLI
        - remove_book(): Remove a book through CLI
        - check_out_book(): Check out a book through CLI
        - check_in_book(): Check in a book through CLI
        - generate_reports(): Generate reports through CLI

Functions:
- main(): Main function to initialize library and CLI, and start the program

Execution:
- The main function initializes a library and a CLI interface.
- The CLI interface provides options to interact with the library system, such as adding/removing books, checking books in/out, generating reports, and exiting the program.



Adding a Book:

Choose option 1 from the menu.
Enter the title, author, ISBN, and quantity of the book when prompted.
Removing a Book:

Choose option 2 from the menu.
Enter the title of the book you want to remove.
Checking Out a Book:

Choose option 3 from the menu.
Enter the title of the book you want to check out.
Enter the name of the patron who is checking out the book.
Checking In a Book:

Choose option 4 from the menu.
Enter the title of the book you want to check in.
Searching for a Book:

Choose option 5 from the menu.
Enter the title, author, or ISBN of the book you want to search for.
Generating Reports:

Choose option 6 from the menu.
Reports will display the total number of books in the library, total registered patrons, and total transactions conducted.
Exiting the Program:

Choose option 7 from the menu to exit the program.



Scenario 1: Adding Books
Choose option 1 from the menu.
Enter the details of the book when prompted.
Title: "To Kill a Mockingbird"
Author: "Harper Lee"
ISBN: "9780061120084"
Quantity: 5
Repeat the process for other books.

Scenario 2: Checking Out a Book
Choose option 3 from the menu.
Enter the title of the book to check out.
Title: "To Kill a Mockingbird"
Enter the name of the patron who is checking out the book.
Patron Name: "John Doe"
The system will display the transaction details, including checkout date and due date.

Scenario 3: Checking In a Book
Choose option 4 from the menu.
Enter the title of the book to check in.
Title: "To Kill a Mockingbird"
The system will mark the book as checked in if it was checked out.

Scenario 4: Generating Reports
Choose option 5 from the menu.
The system will generate and display reports, including:
Total books in the library.
Total registered patrons.
Total transactions conducted.
Scenario 5: Exiting the Program

Choose option 6 from the menu.
The program will exit.

Discuss

I had some challenges with managing large volumes of data, ensuring data consistency, and implementing mechanisms for data retrieval, storage, and manipulation.

The project seems well-structured and covers essential functionalities. However, there are some potential areas for improvement and challenges I faced during implementation: 
I need to improve the CLI interface with clearer prompts, error messages, and formatting which could enhance the user experience.




